CREATE TABLE app_user (
    id BIGINT NOT NULL GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    username TEXT NOT NULL UNIQUE,
    password TEXT NOT NULL,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW()
);

CREATE TABLE person (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id BIGINT NOT NULL REFERENCES app_user (id),
    first_name TEXT NOT NULL,
    last_name TEXT NOT NULL,
    email TEXT NOT NULL UNIQUE,
    date_of_birth DATE NOT NULL,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW()
);

CREATE TYPE person_agreement_type AS ENUM ('TERMS_AND_CONDITIONS');

CREATE TABLE person_agreements (
    agreement_type person_agreement_type NOT NULL,
    person_id BIGINT NOT NULL REFERENCES person (id),
    has_accepted BOOLEAN NOT NULL DEFAULT FALSE,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),

    PRIMARY KEY (agreement_type, person_id)
);

CREATE TABLE session (
    id BIGINT NOT NULL GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id BIGINT NOT NULL REFERENCES app_user (id),
    token TEXT NOT NULL,
    started_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    ended_at TIMESTAMPTZ,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW()
);

CREATE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
    BEGIN
        NEW.updated_at = now();
        RETURN NEW;   
    END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER update_app_user_updated_at_column BEFORE UPDATE on app_user FOR EACH ROW EXECUTE PROCEDURE update_updated_at_column();

CREATE TRIGGER update_person_agreements_updated_at_column BEFORE UPDATE on person_agreements FOR EACH ROW EXECUTE PROCEDURE update_updated_at_column();

CREATE TRIGGER update_person_updated_at_column BEFORE UPDATE on person FOR EACH ROW EXECUTE PROCEDURE update_updated_at_column();

CREATE TRIGGER update_session_updated_at_column BEFORE UPDATE on session FOR EACH ROW EXECUTE PROCEDURE update_updated_at_column();